# This file is a template, and might need editing before it works on your project.
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Laravel.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/php
image: php:7.4 


# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: https://docs.gitlab.com/ee/ci/services/index.html
services:
  - mysql:5.7

#variables:
#  MYSQL_DATABASE: project_name
 # MYSQL_ROOT_PASSWORD: secret

# This folder is cached between builds
# https://docs.gitlab.com/ee/ci/yaml/index.html#cache


before_script:
  - apt-get update -yqq
  - apt-get install -yqq git unzip zip 
  - apt-get install -y libpq-dev
  - docker-php-ext-install pdo_mysql
  - curl -sS https://getcomposer.org/installer | php
  - mv composer.phar /usr/local/bin/composer
  - apt-get update
  - apt-get install -y git

stages:
  - build
  - deploy
  - test


build_app:
  stage: build
  script:

    - cp .env.example .env
    - composer  update
    - php artisan migrate
    - php artisan key:generate
    - php artisan config:cache
    - zip -r myapp.zip . -x vendor/\*
  
  artifacts:
    paths:
      - myapp.zip





    

run_tests:
  stage: test
  script:
    - cp .env.example .env
    - composer  update
    - php artisan key:generate
    - vendor/bin/phpunit




  
 
  

cache:
  paths:
    - vendor/





